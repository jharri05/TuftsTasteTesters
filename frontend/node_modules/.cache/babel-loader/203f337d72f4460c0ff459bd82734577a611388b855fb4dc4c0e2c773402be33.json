{"ast":null,"code":"var _jsxFileName = \"/Users/joshharrison/Desktop/GitHub/TuftsTasteTesters/src/Rating.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import './Rating.css'; // Import the Rating styles\n// import 'boxicons'; // Import the Boxicons CSS\n\n// const Rating = ({ iconType = 'star' }) => {\n//   const [ratings, setRatings] = useState([]); // Store the array of ratings\n//   const [userRating, setUserRating] = useState(0); // Current rating selected by the user\n//   const [hoveredRating, setHoveredRating] = useState(0); // To display the hovered icons for preview\n//   const [isSubmitted, setIsSubmitted] = useState(false); // Track if the rating has been submitted\n\n//   // Function to calculate the average rating\n//   const calculateAverageRating = () => {\n//     if (ratings.length === 0) return 0; // Avoid division by zero if no ratings yet\n//     const total = ratings.reduce((acc, rating) => acc + rating, 0);\n//     const average = total / ratings.length;\n//     return Math.round(average); // Round to the nearest integer\n//   };\n\n//   // Handle the user clicking on an icon to select the rating\n//   const handleIconClick = (rating) => {\n//     if (!isSubmitted) {\n//       setUserRating(rating); // Update the selected rating\n//     }\n//   };\n\n//   // Handle mouse hover over an icon for preview\n//   const handleIconHover = (rating) => {\n//     if (!isSubmitted) {\n//       setHoveredRating(rating); // Set the rating for hover preview\n//     }\n//   };\n\n//   // Handle mouse leave to reset hover effect\n//   const handleMouseLeave = () => {\n//     setHoveredRating(0); // Reset hover rating\n//   };\n\n//   // Handle form submission to add the user's rating\n//   const handleRatingSubmit = (e) => {\n//     e.preventDefault();\n//     if (userRating >= 1 && userRating <= 5) {\n//       setRatings([...ratings, userRating]); // Add the rating to the ratings array\n//       setIsSubmitted(true); // Mark as submitted\n//     } else {\n//       alert('Please select a rating between 1 and 5!');\n//     }\n//   };\n\n//   const averageRating = calculateAverageRating();\n\n//   // Generate the appropriate icon for stars or people based on the iconType\n//   const renderIcon = (type, filled) => {\n//     const color = type === 'star' ? '#f7c21a' : '#88ddf5'; // Set color for star or person\n//     if (type === 'star') {\n//       return filled ? (\n//         <box-icon name=\"star\" type=\"solid\" color={color}></box-icon>\n//       ) : (\n//         <box-icon name=\"star\" color={color}></box-icon>\n//       );\n//     } else if (type === 'person') {\n//       return filled ? (\n//         <box-icon name=\"user\" type=\"solid\" color={color}></box-icon>\n//       ) : (\n//         <box-icon name=\"user\" color={color}></box-icon>\n//       );\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div>\n//         {/* Display the average rating using the chosen icon */}\n//         {[...Array(averageRating)].map((_, index) => (\n//           <span key={index}>{renderIcon(iconType, true)}</span>\n//         ))}\n//       </div>\n//       <div>Average Rating: {averageRating} / 5</div>\n\n//       <h4>Your Rating</h4>\n//       <div className=\"icon-rating\">\n//         {/* Create 5 icons (either stars or people) */}\n//         {[1, 2, 3, 4, 5].map((icon) => (\n//           <span\n//             key={icon}\n//             onClick={() => handleIconClick(icon)} // Set the rating when clicked\n//             onMouseEnter={() => handleIconHover(icon)} // Show preview on hover\n//             onMouseLeave={handleMouseLeave} // Reset on mouse leave\n//           >\n//             {/* Show filled icon if user rating or hovered rating is equal to or greater than the icon number */}\n//             {renderIcon(\n//               iconType,\n//               userRating >= icon || hoveredRating >= icon\n//             )}\n//           </span>\n//         ))}\n//       </div>\n\n//       {/* Show Submit button only if not submitted yet */}\n//       {!isSubmitted && (\n//         <button onClick={handleRatingSubmit}>Submit Rating</button>\n//       )}\n\n//       {/* Show the submitted rating */}\n//       {isSubmitted && (\n//         <div>Your rating: {userRating} / 5</div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Rating;\n\nimport React, { useState, useEffect } from 'react';\nimport './Rating.css'; // Import the Rating styles\nimport 'boxicons'; // Import the Boxicons CSS\nimport confetti from 'canvas-confetti';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Rating = ({\n  iconType = 'star'\n}) => {\n  _s();\n  const [ratings, setRatings] = useState([]); // Store the array of ratings\n  const [userRating, setUserRating] = useState(0); // Current rating selected by the user\n  const [hoveredRating, setHoveredRating] = useState(0); // To display the hovered icons for preview\n  const [isSubmitted, setIsSubmitted] = useState(false); // Track if the rating has been submitted\n\n  // Function to calculate the average rating\n  const calculateAverageRating = () => {\n    if (ratings.length === 0) return 0; // Avoid division by zero if no ratings yet\n    const total = ratings.reduce((acc, rating) => acc + rating, 0);\n    const average = total / ratings.length;\n    return Math.round(average); // Round to the nearest integer\n  };\n\n  // Function to trigger confetti animation\n  const triggerConfetti = () => {\n    confetti({\n      particleCount: 75,\n      // Number of confetti particles\n      spread: 75,\n      // Spread angle\n      origin: {\n        x: 0.5,\n        y: 0.5\n      },\n      // Origin (center of the screen)\n      //   colors: ['#ff0', '#0f0', '#00f'], // Color of the confetti\n      colors: ['#000080', '#87ceeb', '#8b4513']\n    });\n  };\n\n  // Function to load ratings from localStorage\n  const loadRatings = () => {\n    const storedRatings = JSON.parse(localStorage.getItem('ratings'));\n    if (storedRatings) {\n      setRatings(storedRatings); // Load ratings from localStorage if available\n    }\n  };\n\n  // Store the ratings to localStorage whenever ratings change\n  const saveRatings = updatedRatings => {\n    localStorage.setItem('ratings', JSON.stringify(updatedRatings));\n  };\n\n  // Effect to load ratings on component mount\n  useEffect(() => {\n    loadRatings();\n  }, []);\n\n  // Handle the user clicking on an icon to select the rating\n  const handleIconClick = rating => {\n    if (!isSubmitted) {\n      setUserRating(rating); // Update the selected rating\n    }\n  };\n\n  // Handle mouse hover over an icon for preview\n  const handleIconHover = rating => {\n    if (!isSubmitted) {\n      setHoveredRating(rating); // Set the rating for hover preview\n    }\n  };\n\n  // Handle mouse leave to reset hover effect\n  const handleMouseLeave = () => {\n    setHoveredRating(0); // Reset hover rating\n  };\n\n  // Handle form submission to add the user's rating\n  const handleRatingSubmit = e => {\n    e.preventDefault();\n    if (userRating >= 1 && userRating <= 5) {\n      const updatedRatings = [...ratings, userRating]; // Add the rating to the ratings array\n      setRatings(updatedRatings); // Update state with new ratings array\n      saveRatings(updatedRatings); // Save the new ratings array to localStorage\n      setIsSubmitted(true); // Mark as submitted\n      triggerConfetti();\n    } else {\n      alert('Please select a rating between 1 and 5!');\n    }\n  };\n  const averageRating = calculateAverageRating();\n\n  // Generate the appropriate icon for stars or people based on the iconType\n  const renderIcon = (type, filled) => {\n    const color = type === 'star' ? '#f7c21a' : '#88ddf5'; // Set color for star or person\n    if (type === 'star') {\n      return filled ? /*#__PURE__*/_jsxDEV(\"box-icon\", {\n        name: \"star\",\n        type: \"solid\",\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"box-icon\", {\n        name: \"star\",\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this);\n    } else if (type === 'person') {\n      return filled ? /*#__PURE__*/_jsxDEV(\"box-icon\", {\n        name: \"user\",\n        type: \"solid\",\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"box-icon\", {\n        name: \"user\",\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  //   const renderIcon = (type, filled) => {\n  //     let color;\n\n  //     // Set color for different icon types\n  //     if (type === 'star') {\n  //       color = '#f7c21a'; // Color for star\n  //     } else if (type === 'person') {\n  //       color = '#88ddf5'; // Color for person\n  //     } else if (type === 'fork') {\n  //       color = '#755008'; // Color for fork\n  //     }\n\n  //     // Return the appropriate icon based on the type and filled state\n  //     if (type === 'star') {\n  //       return filled ? (\n  //         <box-icon name=\"star\" type=\"solid\" color={color}></box-icon>\n  //       ) : (\n  //         <box-icon name=\"star\" color={color}></box-icon>\n  //       );\n  //     } else if (type === 'person') {\n  //       return filled ? (\n  //         <box-icon name=\"user\" type=\"solid\" color={color}></box-icon>\n  //       ) : (\n  //         <box-icon name=\"user\" color={color}></box-icon>\n  //       );\n  //     } else if (type === 'fork') {\n  //       return filled ? (\n  //         <box-icon name=\"fork\" type=\"solid\" color={color}></box-icon>\n  //       ) : (\n  //         <box-icon name=\"fork\" color={color}></box-icon>\n  //       );\n  //     }\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [...Array(averageRating)].map((_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: renderIcon(iconType, true)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Average Rating: \", averageRating, \" / 5\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Your Rating\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon-rating\",\n      children: [1, 2, 3, 4, 5].map(icon => /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => handleIconClick(icon) // Set the rating when clicked\n        ,\n        onMouseEnter: () => handleIconHover(icon) // Show preview on hover\n        ,\n        onMouseLeave: handleMouseLeave // Reset on mouse leave\n        ,\n        children: renderIcon(iconType, userRating >= icon || hoveredRating >= icon)\n      }, icon, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), !isSubmitted && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRatingSubmit,\n      children: \"Submit Rating\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }, this), isSubmitted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Your rating: \", userRating, \" / 5\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_s(Rating, \"dKGFCvrGnB6VkmcGSR9fkiRM7jM=\");\n_c = Rating;\nexport default Rating;\nvar _c;\n$RefreshReg$(_c, \"Rating\");","map":{"version":3,"names":["React","useState","useEffect","confetti","jsxDEV","_jsxDEV","Rating","iconType","_s","ratings","setRatings","userRating","setUserRating","hoveredRating","setHoveredRating","isSubmitted","setIsSubmitted","calculateAverageRating","length","total","reduce","acc","rating","average","Math","round","triggerConfetti","particleCount","spread","origin","x","y","colors","loadRatings","storedRatings","JSON","parse","localStorage","getItem","saveRatings","updatedRatings","setItem","stringify","handleIconClick","handleIconHover","handleMouseLeave","handleRatingSubmit","e","preventDefault","alert","averageRating","renderIcon","type","filled","color","name","fileName","_jsxFileName","lineNumber","columnNumber","children","Array","map","_","index","className","icon","onClick","onMouseEnter","onMouseLeave","_c","$RefreshReg$"],"sources":["/Users/joshharrison/Desktop/GitHub/TuftsTasteTesters/src/Rating.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import './Rating.css'; // Import the Rating styles\n// import 'boxicons'; // Import the Boxicons CSS\n\n// const Rating = ({ iconType = 'star' }) => {\n//   const [ratings, setRatings] = useState([]); // Store the array of ratings\n//   const [userRating, setUserRating] = useState(0); // Current rating selected by the user\n//   const [hoveredRating, setHoveredRating] = useState(0); // To display the hovered icons for preview\n//   const [isSubmitted, setIsSubmitted] = useState(false); // Track if the rating has been submitted\n\n//   // Function to calculate the average rating\n//   const calculateAverageRating = () => {\n//     if (ratings.length === 0) return 0; // Avoid division by zero if no ratings yet\n//     const total = ratings.reduce((acc, rating) => acc + rating, 0);\n//     const average = total / ratings.length;\n//     return Math.round(average); // Round to the nearest integer\n//   };\n\n//   // Handle the user clicking on an icon to select the rating\n//   const handleIconClick = (rating) => {\n//     if (!isSubmitted) {\n//       setUserRating(rating); // Update the selected rating\n//     }\n//   };\n\n//   // Handle mouse hover over an icon for preview\n//   const handleIconHover = (rating) => {\n//     if (!isSubmitted) {\n//       setHoveredRating(rating); // Set the rating for hover preview\n//     }\n//   };\n\n//   // Handle mouse leave to reset hover effect\n//   const handleMouseLeave = () => {\n//     setHoveredRating(0); // Reset hover rating\n//   };\n\n//   // Handle form submission to add the user's rating\n//   const handleRatingSubmit = (e) => {\n//     e.preventDefault();\n//     if (userRating >= 1 && userRating <= 5) {\n//       setRatings([...ratings, userRating]); // Add the rating to the ratings array\n//       setIsSubmitted(true); // Mark as submitted\n//     } else {\n//       alert('Please select a rating between 1 and 5!');\n//     }\n//   };\n\n//   const averageRating = calculateAverageRating();\n\n//   // Generate the appropriate icon for stars or people based on the iconType\n//   const renderIcon = (type, filled) => {\n//     const color = type === 'star' ? '#f7c21a' : '#88ddf5'; // Set color for star or person\n//     if (type === 'star') {\n//       return filled ? (\n//         <box-icon name=\"star\" type=\"solid\" color={color}></box-icon>\n//       ) : (\n//         <box-icon name=\"star\" color={color}></box-icon>\n//       );\n//     } else if (type === 'person') {\n//       return filled ? (\n//         <box-icon name=\"user\" type=\"solid\" color={color}></box-icon>\n//       ) : (\n//         <box-icon name=\"user\" color={color}></box-icon>\n//       );\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div>\n//         {/* Display the average rating using the chosen icon */}\n//         {[...Array(averageRating)].map((_, index) => (\n//           <span key={index}>{renderIcon(iconType, true)}</span>\n//         ))}\n//       </div>\n//       <div>Average Rating: {averageRating} / 5</div>\n\n//       <h4>Your Rating</h4>\n//       <div className=\"icon-rating\">\n//         {/* Create 5 icons (either stars or people) */}\n//         {[1, 2, 3, 4, 5].map((icon) => (\n//           <span\n//             key={icon}\n//             onClick={() => handleIconClick(icon)} // Set the rating when clicked\n//             onMouseEnter={() => handleIconHover(icon)} // Show preview on hover\n//             onMouseLeave={handleMouseLeave} // Reset on mouse leave\n//           >\n//             {/* Show filled icon if user rating or hovered rating is equal to or greater than the icon number */}\n//             {renderIcon(\n//               iconType,\n//               userRating >= icon || hoveredRating >= icon\n//             )}\n//           </span>\n//         ))}\n//       </div>\n\n//       {/* Show Submit button only if not submitted yet */}\n//       {!isSubmitted && (\n//         <button onClick={handleRatingSubmit}>Submit Rating</button>\n//       )}\n\n//       {/* Show the submitted rating */}\n//       {isSubmitted && (\n//         <div>Your rating: {userRating} / 5</div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Rating;\n\n\nimport React, { useState, useEffect } from 'react';\nimport './Rating.css'; // Import the Rating styles\nimport 'boxicons'; // Import the Boxicons CSS\nimport confetti from 'canvas-confetti'; \n\nconst Rating = ({ iconType = 'star' }) => {\n  const [ratings, setRatings] = useState([]); // Store the array of ratings\n  const [userRating, setUserRating] = useState(0); // Current rating selected by the user\n  const [hoveredRating, setHoveredRating] = useState(0); // To display the hovered icons for preview\n  const [isSubmitted, setIsSubmitted] = useState(false); // Track if the rating has been submitted\n\n  // Function to calculate the average rating\n  const calculateAverageRating = () => {\n    if (ratings.length === 0) return 0; // Avoid division by zero if no ratings yet\n    const total = ratings.reduce((acc, rating) => acc + rating, 0);\n    const average = total / ratings.length;\n    return Math.round(average); // Round to the nearest integer\n  };\n      \n  // Function to trigger confetti animation\n  const triggerConfetti = () => {\n    confetti({\n      particleCount: 75, // Number of confetti particles\n      spread: 75, // Spread angle\n      origin: { x: 0.5, y: 0.5 }, // Origin (center of the screen)\n    //   colors: ['#ff0', '#0f0', '#00f'], // Color of the confetti\n      colors: ['#000080', '#87ceeb', '#8b4513'],\n    });\n  };\n    \n\n  \n\n  // Function to load ratings from localStorage\n  const loadRatings = () => {\n    const storedRatings = JSON.parse(localStorage.getItem('ratings'));\n    if (storedRatings) {\n      setRatings(storedRatings); // Load ratings from localStorage if available\n    }\n  };\n\n  // Store the ratings to localStorage whenever ratings change\n  const saveRatings = (updatedRatings) => {\n    localStorage.setItem('ratings', JSON.stringify(updatedRatings));\n  };\n\n  // Effect to load ratings on component mount\n  useEffect(() => {\n    loadRatings();\n  }, []);\n\n  // Handle the user clicking on an icon to select the rating\n  const handleIconClick = (rating) => {\n    if (!isSubmitted) {\n      setUserRating(rating); // Update the selected rating\n    }\n  };\n\n  // Handle mouse hover over an icon for preview\n  const handleIconHover = (rating) => {\n    if (!isSubmitted) {\n      setHoveredRating(rating); // Set the rating for hover preview\n    }\n  };\n\n  // Handle mouse leave to reset hover effect\n  const handleMouseLeave = () => {\n    setHoveredRating(0); // Reset hover rating\n  };\n\n  // Handle form submission to add the user's rating\n  const handleRatingSubmit = (e) => {\n    e.preventDefault();\n    if (userRating >= 1 && userRating <= 5) {\n      const updatedRatings = [...ratings, userRating]; // Add the rating to the ratings array\n      setRatings(updatedRatings); // Update state with new ratings array\n      saveRatings(updatedRatings); // Save the new ratings array to localStorage\n      setIsSubmitted(true); // Mark as submitted\n      triggerConfetti();\n    } else {\n      alert('Please select a rating between 1 and 5!');\n    }\n  };\n\n  const averageRating = calculateAverageRating();\n\n  // Generate the appropriate icon for stars or people based on the iconType\n  const renderIcon = (type, filled) => {\n    const color = type === 'star' ? '#f7c21a' : '#88ddf5'; // Set color for star or person\n    if (type === 'star') {\n      return filled ? (\n        <box-icon name=\"star\" type=\"solid\" color={color}></box-icon>\n      ) : (\n        <box-icon name=\"star\" color={color}></box-icon>\n      );\n    } else if (type === 'person') {\n      return filled ? (\n        <box-icon name=\"user\" type=\"solid\" color={color}></box-icon>\n      ) : (\n        <box-icon name=\"user\" color={color}></box-icon>\n      );\n    }\n  };\n\n\n\n//   const renderIcon = (type, filled) => {\n//     let color;\n    \n//     // Set color for different icon types\n//     if (type === 'star') {\n//       color = '#f7c21a'; // Color for star\n//     } else if (type === 'person') {\n//       color = '#88ddf5'; // Color for person\n//     } else if (type === 'fork') {\n//       color = '#755008'; // Color for fork\n//     }\n    \n//     // Return the appropriate icon based on the type and filled state\n//     if (type === 'star') {\n//       return filled ? (\n//         <box-icon name=\"star\" type=\"solid\" color={color}></box-icon>\n//       ) : (\n//         <box-icon name=\"star\" color={color}></box-icon>\n//       );\n//     } else if (type === 'person') {\n//       return filled ? (\n//         <box-icon name=\"user\" type=\"solid\" color={color}></box-icon>\n//       ) : (\n//         <box-icon name=\"user\" color={color}></box-icon>\n//       );\n//     } else if (type === 'fork') {\n//       return filled ? (\n//         <box-icon name=\"fork\" type=\"solid\" color={color}></box-icon>\n//       ) : (\n//         <box-icon name=\"fork\" color={color}></box-icon>\n//       );\n//     }\n//   };\n\n  return (\n    <div>\n      <div>\n        {/* Display the average rating using the chosen icon */}\n        {[...Array(averageRating)].map((_, index) => (\n          <span key={index}>{renderIcon(iconType, true)}</span>\n        ))}\n      </div>\n      <div>Average Rating: {averageRating} / 5</div>\n\n      <h4>Your Rating</h4>\n      <div className=\"icon-rating\">\n        {/* Create 5 icons (either stars or people) */}\n        {[1, 2, 3, 4, 5].map((icon) => (\n          <span\n            key={icon}\n            onClick={() => handleIconClick(icon)} // Set the rating when clicked\n            onMouseEnter={() => handleIconHover(icon)} // Show preview on hover\n            onMouseLeave={handleMouseLeave} // Reset on mouse leave\n          >\n            {/* Show filled icon if user rating or hovered rating is equal to or greater than the icon number */}\n            {renderIcon(\n              iconType,\n              userRating >= icon || hoveredRating >= icon\n            )}\n          </span>\n        ))}\n      </div>\n\n      {/* Show Submit button only if not submitted yet */}\n      {!isSubmitted && (\n        <button onClick={handleRatingSubmit}>Submit Rating</button>\n      )}\n\n      {/* Show the submitted rating */}\n      {isSubmitted && (\n        <div>Your rating: {userRating} / 5</div>\n      )}\n    </div>\n  );\n};\n\nexport default Rating;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}