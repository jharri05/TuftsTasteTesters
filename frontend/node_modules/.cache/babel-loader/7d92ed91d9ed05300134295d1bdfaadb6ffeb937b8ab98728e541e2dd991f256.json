{"ast":null,"code":"// import React, { useState } from 'react';\n// import './Rating.css'; // Import the Rating styles\n// import 'boxicons'; // Import the Boxicons CSS\n\n// const Rating = ({ iconType = 'star' }) => {\n//   const [ratings, setRatings] = useState([]); // Store the array of ratings\n//   const [userRating, setUserRating] = useState(0); // Current rating selected by the user\n//   const [hoveredRating, setHoveredRating] = useState(0); // To display the hovered icons for preview\n//   const [isSubmitted, setIsSubmitted] = useState(false); // Track if the rating has been submitted\n\n//   // Function to calculate the average rating\n//   const calculateAverageRating = () => {\n//     if (ratings.length === 0) return 0; // Avoid division by zero if no ratings yet\n//     const total = ratings.reduce((acc, rating) => acc + rating, 0);\n//     const average = total / ratings.length;\n//     return Math.round(average); // Round to the nearest integer\n//   };\n\n//   // Handle the user clicking on an icon to select the rating\n//   const handleIconClick = (rating) => {\n//     if (!isSubmitted) {\n//       setUserRating(rating); // Update the selected rating\n//     }\n//   };\n\n//   // Handle mouse hover over an icon for preview\n//   const handleIconHover = (rating) => {\n//     if (!isSubmitted) {\n//       setHoveredRating(rating); // Set the rating for hover preview\n//     }\n//   };\n\n//   // Handle mouse leave to reset hover effect\n//   const handleMouseLeave = () => {\n//     setHoveredRating(0); // Reset hover rating\n//   };\n\n//   // Handle form submission to add the user's rating\n//   const handleRatingSubmit = (e) => {\n//     e.preventDefault();\n//     if (userRating >= 1 && userRating <= 5) {\n//       setRatings([...ratings, userRating]); // Add the rating to the ratings array\n//       setIsSubmitted(true); // Mark as submitted\n//     } else {\n//       alert('Please select a rating between 1 and 5!');\n//     }\n//   };\n\n//   const averageRating = calculateAverageRating();\n\n//   // Generate the appropriate icon for stars or people based on the iconType\n//   const renderIcon = (type, filled) => {\n//     const color = type === 'star' ? '#f7c21a' : '#88ddf5'; // Set color for star or person\n//     if (type === 'star') {\n//       return filled ? (\n//         <box-icon name=\"star\" type=\"solid\" color={color}></box-icon>\n//       ) : (\n//         <box-icon name=\"star\" color={color}></box-icon>\n//       );\n//     } else if (type === 'person') {\n//       return filled ? (\n//         <box-icon name=\"user\" type=\"solid\" color={color}></box-icon>\n//       ) : (\n//         <box-icon name=\"user\" color={color}></box-icon>\n//       );\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div>\n//         {/* Display the average rating using the chosen icon */}\n//         {[...Array(averageRating)].map((_, index) => (\n//           <span key={index}>{renderIcon(iconType, true)}</span>\n//         ))}\n//       </div>\n//       <div>Average Rating: {averageRating} / 5</div>\n\n//       <h4>Your Rating</h4>\n//       <div className=\"icon-rating\">\n//         {/* Create 5 icons (either stars or people) */}\n//         {[1, 2, 3, 4, 5].map((icon) => (\n//           <span\n//             key={icon}\n//             onClick={() => handleIconClick(icon)} // Set the rating when clicked\n//             onMouseEnter={() => handleIconHover(icon)} // Show preview on hover\n//             onMouseLeave={handleMouseLeave} // Reset on mouse leave\n//           >\n//             {/* Show filled icon if user rating or hovered rating is equal to or greater than the icon number */}\n//             {renderIcon(\n//               iconType,\n//               userRating >= icon || hoveredRating >= icon\n//             )}\n//           </span>\n//         ))}\n//       </div>\n\n//       {/* Show Submit button only if not submitted yet */}\n//       {!isSubmitted && (\n//         <button onClick={handleRatingSubmit}>Submit Rating</button>\n//       )}\n\n//       {/* Show the submitted rating */}\n//       {isSubmitted && (\n//         <div>Your rating: {userRating} / 5</div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Rating;\n\n// import React, { useState, useEffect } from 'react';\n// import './Rating.css'; // Import the Rating styles\n// import 'boxicons'; // Import the Boxicons CSS\n// import confetti from 'canvas-confetti'; \n\n// const Rating = ({ iconType = 'star' }) => {\n//   const [ratings, setRatings] = useState([]); // Store the array of ratings\n//   const [userRating, setUserRating] = useState(0); // Current rating selected by the user\n//   const [hoveredRating, setHoveredRating] = useState(0); // To display the hovered icons for preview\n//   const [isSubmitted, setIsSubmitted] = useState(false); // Track if the rating has been submitted\n\n//   // Function to calculate the average rating\n//   const calculateAverageRating = () => {\n//     if (ratings.length === 0) return 0; // Avoid division by zero if no ratings yet\n//     const total = ratings.reduce((acc, rating) => acc + rating, 0);\n//     const average = total / ratings.length;\n//     return Math.round(average); // Round to the nearest integer\n//   };\n\n//   // Function to trigger confetti animation\n//   const triggerConfetti = () => {\n//     confetti({\n//       particleCount: 75, // Number of confetti particles\n//       spread: 75, // Spread angle\n//       origin: { x: 0.5, y: 0.5 }, // Origin (center of the screen)\n//     //   colors: ['#ff0', '#0f0', '#00f'], // Color of the confetti\n//       colors: ['#000080', '#87ceeb', '#8b4513'],\n//     });\n//   };\n\n//   // Function to load ratings from localStorage\n//   const loadRatings = () => {\n//     const storedRatings = JSON.parse(localStorage.getItem('ratings'));\n//     if (storedRatings) {\n//       setRatings(storedRatings); // Load ratings from localStorage if available\n//     }\n//   };\n\n//   // Store the ratings to localStorage whenever ratings change\n//   const saveRatings = (updatedRatings) => {\n//     localStorage.setItem('ratings', JSON.stringify(updatedRatings));\n//   };\n\n//   // Effect to load ratings on component mount\n//   useEffect(() => {\n//     loadRatings();\n//   }, []);\n\n//   // Handle the user clicking on an icon to select the rating\n//   const handleIconClick = (rating) => {\n//     if (!isSubmitted) {\n//       setUserRating(rating); // Update the selected rating\n//     }\n//   };\n\n//   // Handle mouse hover over an icon for preview\n//   const handleIconHover = (rating) => {\n//     if (!isSubmitted) {\n//       setHoveredRating(rating); // Set the rating for hover preview\n//     }\n//   };\n\n//   // Handle mouse leave to reset hover effect\n//   const handleMouseLeave = () => {\n//     setHoveredRating(0); // Reset hover rating\n//   };\n\n//   // Handle form submission to add the user's rating\n//   const handleRatingSubmit = (e) => {\n//     e.preventDefault();\n//     if (userRating >= 1 && userRating <= 5) {\n//       const updatedRatings = [...ratings, userRating]; // Add the rating to the ratings array\n//       setRatings(updatedRatings); // Update state with new ratings array\n//       saveRatings(updatedRatings); // Save the new ratings array to localStorage\n//       setIsSubmitted(true); // Mark as submitted\n//       triggerConfetti();\n//     } else {\n//       alert('Please select a rating between 1 and 5!');\n//     }\n//   };\n\n//   const averageRating = calculateAverageRating();\n\n//   // Generate the appropriate icon for stars or people based on the iconType\n//   const renderIcon = (type, filled) => {\n//     const color = type === 'star' ? '#f7c21a' : '#88ddf5'; // Set color for star or person\n//     if (type === 'star') {\n//       return filled ? (\n//         <box-icon name=\"star\" type=\"solid\" color={color}></box-icon>\n//       ) : (\n//         <box-icon name=\"star\" color={color}></box-icon>\n//       );\n//     } else if (type === 'person') {\n//       return filled ? (\n//         <box-icon name=\"user\" type=\"solid\" color={color}></box-icon>\n//       ) : (\n//         <box-icon name=\"user\" color={color}></box-icon>\n//       );\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div>\n//         {/* Display the average rating using the chosen icon */}\n//         {[...Array(averageRating)].map((_, index) => (\n//           <span key={index}>{renderIcon(iconType, true)}</span>\n//         ))}\n//       </div>\n//       <div>Average Rating: {averageRating} / 5</div>\n\n//       <h4>Your Rating</h4>\n//       <div className=\"icon-rating\">\n//         {/* Create 5 icons (either stars or people) */}\n//         {[1, 2, 3, 4, 5].map((icon) => (\n//           <span\n//             key={icon}\n//             onClick={() => handleIconClick(icon)} // Set the rating when clicked\n//             onMouseEnter={() => handleIconHover(icon)} // Show preview on hover\n//             onMouseLeave={handleMouseLeave} // Reset on mouse leave\n//           >\n//             {/* Show filled icon if user rating or hovered rating is equal to or greater than the icon number */}\n//             {renderIcon(\n//               iconType,\n//               userRating >= icon || hoveredRating >= icon\n//             )}\n//           </span>\n//         ))}\n//       </div>\n\n//       {/* Show Submit button only if not submitted yet */}\n//       {!isSubmitted && (\n//         <button onClick={handleRatingSubmit}>Submit Rating</button>\n//       )}\n\n//       {/* Show the submitted rating */}\n//       {isSubmitted && (\n//         <div>Your rating: {userRating} / 5</div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Rating;","map":{"version":3,"names":[],"sources":["C:/Users/sarag/OneDrive/Desktop/JumboHack 2025/TuftsTasteTesters/frontend/src/Rating.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import './Rating.css'; // Import the Rating styles\r\n// import 'boxicons'; // Import the Boxicons CSS\r\n\r\n// const Rating = ({ iconType = 'star' }) => {\r\n//   const [ratings, setRatings] = useState([]); // Store the array of ratings\r\n//   const [userRating, setUserRating] = useState(0); // Current rating selected by the user\r\n//   const [hoveredRating, setHoveredRating] = useState(0); // To display the hovered icons for preview\r\n//   const [isSubmitted, setIsSubmitted] = useState(false); // Track if the rating has been submitted\r\n\r\n//   // Function to calculate the average rating\r\n//   const calculateAverageRating = () => {\r\n//     if (ratings.length === 0) return 0; // Avoid division by zero if no ratings yet\r\n//     const total = ratings.reduce((acc, rating) => acc + rating, 0);\r\n//     const average = total / ratings.length;\r\n//     return Math.round(average); // Round to the nearest integer\r\n//   };\r\n\r\n//   // Handle the user clicking on an icon to select the rating\r\n//   const handleIconClick = (rating) => {\r\n//     if (!isSubmitted) {\r\n//       setUserRating(rating); // Update the selected rating\r\n//     }\r\n//   };\r\n\r\n//   // Handle mouse hover over an icon for preview\r\n//   const handleIconHover = (rating) => {\r\n//     if (!isSubmitted) {\r\n//       setHoveredRating(rating); // Set the rating for hover preview\r\n//     }\r\n//   };\r\n\r\n//   // Handle mouse leave to reset hover effect\r\n//   const handleMouseLeave = () => {\r\n//     setHoveredRating(0); // Reset hover rating\r\n//   };\r\n\r\n//   // Handle form submission to add the user's rating\r\n//   const handleRatingSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     if (userRating >= 1 && userRating <= 5) {\r\n//       setRatings([...ratings, userRating]); // Add the rating to the ratings array\r\n//       setIsSubmitted(true); // Mark as submitted\r\n//     } else {\r\n//       alert('Please select a rating between 1 and 5!');\r\n//     }\r\n//   };\r\n\r\n//   const averageRating = calculateAverageRating();\r\n\r\n//   // Generate the appropriate icon for stars or people based on the iconType\r\n//   const renderIcon = (type, filled) => {\r\n//     const color = type === 'star' ? '#f7c21a' : '#88ddf5'; // Set color for star or person\r\n//     if (type === 'star') {\r\n//       return filled ? (\r\n//         <box-icon name=\"star\" type=\"solid\" color={color}></box-icon>\r\n//       ) : (\r\n//         <box-icon name=\"star\" color={color}></box-icon>\r\n//       );\r\n//     } else if (type === 'person') {\r\n//       return filled ? (\r\n//         <box-icon name=\"user\" type=\"solid\" color={color}></box-icon>\r\n//       ) : (\r\n//         <box-icon name=\"user\" color={color}></box-icon>\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         {/* Display the average rating using the chosen icon */}\r\n//         {[...Array(averageRating)].map((_, index) => (\r\n//           <span key={index}>{renderIcon(iconType, true)}</span>\r\n//         ))}\r\n//       </div>\r\n//       <div>Average Rating: {averageRating} / 5</div>\r\n\r\n//       <h4>Your Rating</h4>\r\n//       <div className=\"icon-rating\">\r\n//         {/* Create 5 icons (either stars or people) */}\r\n//         {[1, 2, 3, 4, 5].map((icon) => (\r\n//           <span\r\n//             key={icon}\r\n//             onClick={() => handleIconClick(icon)} // Set the rating when clicked\r\n//             onMouseEnter={() => handleIconHover(icon)} // Show preview on hover\r\n//             onMouseLeave={handleMouseLeave} // Reset on mouse leave\r\n//           >\r\n//             {/* Show filled icon if user rating or hovered rating is equal to or greater than the icon number */}\r\n//             {renderIcon(\r\n//               iconType,\r\n//               userRating >= icon || hoveredRating >= icon\r\n//             )}\r\n//           </span>\r\n//         ))}\r\n//       </div>\r\n\r\n//       {/* Show Submit button only if not submitted yet */}\r\n//       {!isSubmitted && (\r\n//         <button onClick={handleRatingSubmit}>Submit Rating</button>\r\n//       )}\r\n\r\n//       {/* Show the submitted rating */}\r\n//       {isSubmitted && (\r\n//         <div>Your rating: {userRating} / 5</div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Rating;\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './Rating.css'; // Import the Rating styles\r\n// import 'boxicons'; // Import the Boxicons CSS\r\n// import confetti from 'canvas-confetti'; \r\n\r\n// const Rating = ({ iconType = 'star' }) => {\r\n//   const [ratings, setRatings] = useState([]); // Store the array of ratings\r\n//   const [userRating, setUserRating] = useState(0); // Current rating selected by the user\r\n//   const [hoveredRating, setHoveredRating] = useState(0); // To display the hovered icons for preview\r\n//   const [isSubmitted, setIsSubmitted] = useState(false); // Track if the rating has been submitted\r\n\r\n//   // Function to calculate the average rating\r\n//   const calculateAverageRating = () => {\r\n//     if (ratings.length === 0) return 0; // Avoid division by zero if no ratings yet\r\n//     const total = ratings.reduce((acc, rating) => acc + rating, 0);\r\n//     const average = total / ratings.length;\r\n//     return Math.round(average); // Round to the nearest integer\r\n//   };\r\n      \r\n//   // Function to trigger confetti animation\r\n//   const triggerConfetti = () => {\r\n//     confetti({\r\n//       particleCount: 75, // Number of confetti particles\r\n//       spread: 75, // Spread angle\r\n//       origin: { x: 0.5, y: 0.5 }, // Origin (center of the screen)\r\n//     //   colors: ['#ff0', '#0f0', '#00f'], // Color of the confetti\r\n//       colors: ['#000080', '#87ceeb', '#8b4513'],\r\n//     });\r\n//   };\r\n    \r\n//   // Function to load ratings from localStorage\r\n//   const loadRatings = () => {\r\n//     const storedRatings = JSON.parse(localStorage.getItem('ratings'));\r\n//     if (storedRatings) {\r\n//       setRatings(storedRatings); // Load ratings from localStorage if available\r\n//     }\r\n//   };\r\n\r\n//   // Store the ratings to localStorage whenever ratings change\r\n//   const saveRatings = (updatedRatings) => {\r\n//     localStorage.setItem('ratings', JSON.stringify(updatedRatings));\r\n//   };\r\n\r\n//   // Effect to load ratings on component mount\r\n//   useEffect(() => {\r\n//     loadRatings();\r\n//   }, []);\r\n\r\n//   // Handle the user clicking on an icon to select the rating\r\n//   const handleIconClick = (rating) => {\r\n//     if (!isSubmitted) {\r\n//       setUserRating(rating); // Update the selected rating\r\n//     }\r\n//   };\r\n\r\n//   // Handle mouse hover over an icon for preview\r\n//   const handleIconHover = (rating) => {\r\n//     if (!isSubmitted) {\r\n//       setHoveredRating(rating); // Set the rating for hover preview\r\n//     }\r\n//   };\r\n\r\n//   // Handle mouse leave to reset hover effect\r\n//   const handleMouseLeave = () => {\r\n//     setHoveredRating(0); // Reset hover rating\r\n//   };\r\n\r\n//   // Handle form submission to add the user's rating\r\n//   const handleRatingSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     if (userRating >= 1 && userRating <= 5) {\r\n//       const updatedRatings = [...ratings, userRating]; // Add the rating to the ratings array\r\n//       setRatings(updatedRatings); // Update state with new ratings array\r\n//       saveRatings(updatedRatings); // Save the new ratings array to localStorage\r\n//       setIsSubmitted(true); // Mark as submitted\r\n//       triggerConfetti();\r\n//     } else {\r\n//       alert('Please select a rating between 1 and 5!');\r\n//     }\r\n//   };\r\n\r\n//   const averageRating = calculateAverageRating();\r\n\r\n//   // Generate the appropriate icon for stars or people based on the iconType\r\n//   const renderIcon = (type, filled) => {\r\n//     const color = type === 'star' ? '#f7c21a' : '#88ddf5'; // Set color for star or person\r\n//     if (type === 'star') {\r\n//       return filled ? (\r\n//         <box-icon name=\"star\" type=\"solid\" color={color}></box-icon>\r\n//       ) : (\r\n//         <box-icon name=\"star\" color={color}></box-icon>\r\n//       );\r\n//     } else if (type === 'person') {\r\n//       return filled ? (\r\n//         <box-icon name=\"user\" type=\"solid\" color={color}></box-icon>\r\n//       ) : (\r\n//         <box-icon name=\"user\" color={color}></box-icon>\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         {/* Display the average rating using the chosen icon */}\r\n//         {[...Array(averageRating)].map((_, index) => (\r\n//           <span key={index}>{renderIcon(iconType, true)}</span>\r\n//         ))}\r\n//       </div>\r\n//       <div>Average Rating: {averageRating} / 5</div>\r\n\r\n//       <h4>Your Rating</h4>\r\n//       <div className=\"icon-rating\">\r\n//         {/* Create 5 icons (either stars or people) */}\r\n//         {[1, 2, 3, 4, 5].map((icon) => (\r\n//           <span\r\n//             key={icon}\r\n//             onClick={() => handleIconClick(icon)} // Set the rating when clicked\r\n//             onMouseEnter={() => handleIconHover(icon)} // Show preview on hover\r\n//             onMouseLeave={handleMouseLeave} // Reset on mouse leave\r\n//           >\r\n//             {/* Show filled icon if user rating or hovered rating is equal to or greater than the icon number */}\r\n//             {renderIcon(\r\n//               iconType,\r\n//               userRating >= icon || hoveredRating >= icon\r\n//             )}\r\n//           </span>\r\n//         ))}\r\n//       </div>\r\n\r\n//       {/* Show Submit button only if not submitted yet */}\r\n//       {!isSubmitted && (\r\n//         <button onClick={handleRatingSubmit}>Submit Rating</button>\r\n//       )}\r\n\r\n//       {/* Show the submitted rating */}\r\n//       {isSubmitted && (\r\n//         <div>Your rating: {userRating} / 5</div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Rating;\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}